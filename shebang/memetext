#!/usr/bin/env -S uv run --script
#
# /// script
# dependencies = ["typed-ffmpeg"]
# ///
import ffmpeg
import argparse
from pathlib import Path
import sys
import subprocess

argument_parser = argparse.ArgumentParser()
_ = argument_parser.add_argument("input-video-file", type=Path)
_ = argument_parser.add_argument("text")
_ = argument_parser.add_argument("output-video-file", type=Path)
_ = argument_parser.add_argument(
    "--font-file",
    nargs="?",
    default=Path("/usr/share/fonts/OTF/ComicShannsMonoNerdFontPropo-Regular.otf"),
    type=Path,
)
_ = argument_parser.add_argument("--preserve-audio", action="store_true")
args = vars(argument_parser.parse_args())
input_video_file = args["input-video-file"]
if not isinstance(input_video_file, Path):
    sys.exit(1)
text = args["text"]
if not isinstance(text, str):
    sys.exit(2)
output_video_file = args["output-video-file"]
if not isinstance(output_video_file, Path):
    sys.exit(3)
font_file = args["font_file"]
if not isinstance(font_file, Path):
    sys.exit(4)
preserve_audio = args["preserve_audio"]
if not isinstance(preserve_audio, bool):
    sys.exit(7)

if not font_file.exists():
    print(f"{font_file} doesn't exist", file=sys.stderr)
    sys.exit(5)
if not input_video_file.exists():
    print(f"{input_video_file} doesn't exist", file=sys.stderr)
    sys.exit(6)

text_len = len(text)
original = ffmpeg.input(input_video_file)
video = original.drawtext(
    fontfile=str(font_file),
    text=text,
    fontcolor="white",
    x="(w-text_w)/2",
    y="(h-text_h)*0.8",
    fontsize=f"(w/{text_len})",
)
original_gif_filename = None
if input_video_file.suffix == ".gif" and output_video_file.suffix == ".gif":
    video = video.split()
    video = video.video(1).paletteuse(video.video(0).palettegen())
elif output_video_file.suffix == ".gif":
    original_gif_filename = output_video_file
    output_video_file = "/tmp/"+str(output_video_file)+".mp4"
if preserve_audio:
    _ = video.output(original.acopy(), filename=output_video_file).run()
else:
    _ = video.output(filename=output_video_file).run()
if original_gif_filename is not None:
    _ = subprocess.run(["gif", output_video_file, original_gif_filename], check=True)
