#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;

my $help;
my $after;
my $case_insensitive;
my $count_filter_string;
my $start = 1;
my $increment_amount = 1;
my $invert;
my $no_above;
my $no_below;
my $separator = "\t";
my $total;

GetOptions (             'h|help' => \$help,
                          'after' => \$after,
                 'count-filter=s' => \$count_filter_string,
                        'start=i' => \$start,
             'i|case-insensitive' => \$case_insensitive,
             'increment-amount=i' => \$increment_amount,
                     'no-above=i' => \$no_above,
                     'no-below=i' => \$no_below,
                    'separator=s' => \$separator,
                        'total=i' => \$total,
                       'v|invert' => \$invert);
if (defined $help) {
    print STDERR "llc = Live Line Count
Pipe a program's output into llc to number the lines as they are printed.
eg: cat file | llc

Options:
    -h, --help              Prints what you're reading right now to stderr, then exits

    --after                 Number should be printed after the line. If not set, number will be before the line.
    
    --count-filter=REGEX    Only increment and print the number if the line matches REGEX (line will be printed regardless)

    --start=N               The number llc will start counting at (Default: 1)

    -i, --case-insensitive  Make --count-filter case-insensitive

    --increment-amount=N    The amount the number will go up by each line (Default: 1)


    --no-above=N            Don't print numbers above a given number.
                            If not provided, there will not be an upper limit to numbers being printed.

    --no-below=N            Don't print numbers below a given number.
                            If not provided, there will not be a lower limit to numbers being printed.

    --separator=STRING      What will between the number and the line (Default: \\t)

    --total=N               A number to print after the current number, with a / between them

    -v, --invert            Invert --count-filter
";
    exit;
}

my $count_filter_regex;
if (defined $count_filter_string) {
    if (defined $case_insensitive) {
        $count_filter_regex = qr/\Q$count_filter_string\E/i;
    } else {
        $count_filter_regex = qr/\Q$count_filter_string\E/;
    }
}

my $i = $start;

while (my $line = <STDIN>) {
    if (defined $after) {
        chomp($line);
        print $line;
    }
    my $should_count;
    if (defined $count_filter_regex) {
        $should_count = $line =~ $count_filter_regex;
        if ($invert) {
            $should_count = not $should_count;
        }
    } else {
        $should_count = 1;
    }
    if ($should_count) {
        my $should_print_i = 1;
        if (defined $no_below) {
            if ($i < $no_below) {
                $should_print_i = 0;
            }
        }
        if (defined $no_above) {
            if ($i > $no_above) {
                $should_print_i = 0;
            }
        }
        if ($should_print_i) {
            if (defined $after) {
                print $separator;
            }
            print $i;
            if (defined $total) {
                print '/', $total;
            }
            unless (defined $after) {
                print $separator
            }
        }
        $i+=$increment_amount;
    }
    if (defined $after) {
        print "\n";
    } else {
        print $line;
    }
}
